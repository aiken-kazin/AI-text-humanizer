<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>AI Text Humanizer</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html, body {
      height: 100%;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #ec4899 100%);
      color: #1f2937;
      overflow: hidden; /* prevent whole‚Äêpage scrolling */
    }

    .container {
      height: 100%;
      max-width: 1400px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      padding: 16px; /* slightly reduced padding */
    }

    /* ===== HEADER (Title + Subtitle) ===== */
    .header {
      text-align: center;
      margin-bottom: 16px;
      /* Removed extra top/bottom padding so it sits ‚Äúhigher.‚Äù */
    }

    /* Make the <h1> a bit smaller so it sits above the panels */
    h1 {
      font-size: 2.0em;   /* was 2.2em; now even a tad smaller */
      font-weight: 800;
      background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 6px;
      text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    p.description {
      color: rgba(255, 255, 255, 0.9);
      font-size: 1.2em;  /* slightly smaller */
      font-weight: 300;
    }

    /* ===== MAIN CONTENT GRID ===== */
    .main-content {
      flex: 1;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 24px;
      height: calc(100% - 64px); /* subtract header area (~64px) */
    }

    @media (max-width: 1200px) {
      .main-content {
        grid-template-columns: 1fr;
        grid-template-rows: 1fr 1fr;
        gap: 20px;
      }
      h1 {
        font-size: 1.8em;
      }
    }

    @media (max-width: 768px) {
      .container {
        padding: 12px;
      }
      .panel {
        padding: 16px;
      }
      h1 {
        font-size: 1.6em;
      }
      p.description {
        font-size: 1em;
      }
    }

    /* ===== PANELS ===== */
    .panel {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);

      /* Make each panel occupy its full grid‚Äêcell height */
      display: flex;
      flex-direction: column;
      height: 100%;
      overflow: hidden;
      padding: 24px; /* unified padding */
    }

    .input-panel {
      background: rgba(255, 255, 255, 0.98);
    }

    .output-panel {
      background: rgba(248, 250, 252, 0.98);
    }

    /* ===== PANEL HEADER (Title + Subtitle inside each panel) ===== */
    .panel-header {
      margin-bottom: 16px;
      padding-bottom: 12px;
      border-bottom: 2px solid rgba(99, 102, 241, 0.1);
    }

    .panel-title {
      font-size: 1.3em;
      font-weight: 600;
      color: #374151;
      margin-bottom: 6px;
    }

    .panel-subtitle {
      color: #6b7280;
      font-size: 0.9em;
    }

    /* ===== FORM CONTROLS ===== */
    label {
      font-weight: 600;
      display: block;
      margin-bottom: 8px;
      color: #374151;
      font-size: 1em;
    }

    select {
      width: 100%;
      font-size: 15px;
      padding: 10px 14px;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      background: white;
      color: #374151;
      transition: all 0.3s ease;
      margin-bottom: 16px;
    }

    select:focus {
      outline: none;
      border-color: #6366f1;
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    textarea {
      flex: 1; /* take all remaining vertical space */
      font-size: 15px;
      padding: 16px;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      resize: none;
      transition: all 0.3s ease;
      font-family: inherit;
      line-height: 1.6;
      background: #fafafa;
      overflow-y: auto;
    }

    textarea:focus {
      outline: none;
      border-color: #6366f1;
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
      background: white;
    }

    textarea::placeholder {
      color: #9ca3af;
    }

    /* ===== BUTTONS ===== */
    button {
      background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
      color: white;
      padding: 14px 28px;
      font-size: 15px;
      font-weight: 600;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
    }

    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
    }

    button:active {
      transform: translateY(0);
    }

    .copy-button {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
      margin-top: 0;
      flex-shrink: 0;
      width: 100%;
    }

    .copy-button:hover {
      box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
    }

    .copy-button.copied {
      background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
    }

    /* ===== OUTPUT CONTENT (scrollable) ===== */
    .output-content {
      flex: 1; /* fill vertical space between header and bottom button */
      padding: 16px;
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 15px;
      line-height: 1.7;
      white-space: pre-wrap;
      overflow-y: auto; /* ONLY this area scrolls */
      color: #334155;
    }

    /* ===== PANEL BOTTOM (holds the button) ===== */
    .panel-bottom {
      margin-top: 16px;
      /* Fixed height so that buttons in both panels sit on same Y axis */
      height: 48px;
      display: flex;
      align-items: center;
    }

    /* ===== LOADING & ERROR STATES ===== */
    .loading {
      color: #64748b;
      font-style: italic;
      text-align: center;
      padding: 40px 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }

    .loading::before {
      content: "‚ú®";
      animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
      0%, 100% {
        opacity: 1;
      }
      50% {
        opacity: 0.5;
      }
    }

    .error {
      color: #ef4444;
      font-weight: 500;
      text-align: center;
      padding: 24px 16px;
      background: rgba(239, 68, 68, 0.05);
      border-radius: 8px;
    }

    /* ===== CUSTOM SCROLLBAR for output ===== */
    .output-content::-webkit-scrollbar {
      width: 6px;
    }
    .output-content::-webkit-scrollbar-track {
      background: #f1f5f9;
      border-radius: 3px;
    }
    .output-content::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 3px;
    }
    .output-content::-webkit-scrollbar-thumb:hover {
      background: #94a3b8;
    }

  </style>
</head>
<body>
  <div class="container">
    <!-- ===== HEADER ===== -->
    <div class="header">
      <h1>üåü AI Text Humanizer</h1>
      <p class="description">Transform AI text into natural, human-like language</p>
    </div>

    <!-- ===== MAIN GRID (Input + Output) ===== -->
    <div class="main-content">
      <!-- ==================== INPUT PANEL ==================== -->
      <div class="panel input-panel">
        <div class="panel-header">
          <div class="panel-title">üìù Input Text</div>
          <div class="panel-subtitle">Paste your AI-generated content here</div>
        </div>

        <label for="audience">Select Tone / Audience:</label>
        <select id="audience">
          <option value="default">Default (Natural &amp; Human)</option>
          <option value="business">Business Professional</option>
          <option value="academic">Academic &amp; Formal</option>
          <option value="gen_z">Gen Z &amp; Casual</option>
        </select>

        <textarea
          id="inputText"
          placeholder="Paste your AI-generated text here and watch the magic happen..."
        ></textarea>

        <div class="panel-bottom">
          <!-- ‚ÄúHumanize Text‚Äù button, fixed at bottom of input‚Äêpanel -->
          <button type="button" onclick="humanize()">üöÄ Humanize Text</button>
        </div>
      </div>

      <!-- ==================== OUTPUT PANEL ==================== -->
      <div class="panel output-panel">
        <div class="panel-header">
          <div class="panel-title">‚ú® Humanized Result</div>
          <div class="panel-subtitle">Your transformed, natural text</div>
        </div>

        <!-- #result holds loading / error / final text; this area scrolls -->
        <div id="result" class="output-content">
          <div class="loading">Your humanized text will appear here...</div>
        </div>

        <div class="panel-bottom">
          <!-- Copy button initially hidden; will be shown after we get a response -->
          <button
            id="copyBtn"
            type="button"
            class="copy-button"
            style="display: none;"
            onclick="copyText()"
          >
            üìã Copy Text
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- ===== JAVASCRIPT ===== -->
  <script>
    async function humanize() {
      const textArea = document.getElementById("inputText");
      const audienceSelect = document.getElementById("audience");
      const outputDiv = document.getElementById("result");
      const copyBtn = document.getElementById("copyBtn");

      const text = textArea.value.trim();
      const audience = audienceSelect.value;

      if (!text) {
        alert("Please enter some text first!");
        return;
      }

      // Show ‚Äúloading‚Äù inside outputDiv
      outputDiv.textContent = "";
      const spinner = document.createElement("div");
      spinner.className = "loading";
      spinner.textContent = "Processing your text...";
      outputDiv.appendChild(spinner);

      // Hide copy button until we have a successful response
      copyBtn.style.display = "none";

      try {
        const response = await fetch("/humanize", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ text, audience }),
        });

        if (!response.ok) {
          throw new Error(`Server responded with status ${response.status}`);
        }

        const data = await response.json();

        // Replace spinner with the actual humanized text
        outputDiv.textContent = data.humanized;
        // Show copy button
        copyBtn.style.display = "block";
      } catch (error) {
        outputDiv.textContent = "";
        const errDiv = document.createElement("div");
        errDiv.className = "error";
        errDiv.textContent = `‚ùå Error: ${error.message}`;
        outputDiv.appendChild(errDiv);
        console.error("Error:", error);
      }
    }

    async function copyText() {
      const outputDiv = document.getElementById("result");
      const copyBtn = document.getElementById("copyBtn");
      const textToCopy = outputDiv.textContent || outputDiv.innerText;

      try {
        await navigator.clipboard.writeText(textToCopy);

        // Instant feedback on the button
        const original = copyBtn.innerHTML;
        copyBtn.innerHTML = "‚úÖ Copied!";
        copyBtn.classList.add("copied");
        setTimeout(() => {
          copyBtn.innerHTML = original;
          copyBtn.classList.remove("copied");
        }, 2000);
      } catch {
        // Fallback for older browsers
        const tmp = document.createElement("textarea");
        tmp.value = textToCopy;
        document.body.appendChild(tmp);
        tmp.select();
        document.execCommand("copy");
        document.body.removeChild(tmp);

        copyBtn.innerHTML = "‚úÖ Copied!";
        setTimeout(() => {
          copyBtn.innerHTML = "üìã Copy Text";
        }, 2000);
      }
    }

    // Ctrl+Enter = humanize
    document.addEventListener("keydown", (e) => {
      if (e.ctrlKey && e.key === "Enter") {
        humanize();
      }
    });

    // Auto‚Äêresize the input textarea as you type
    document.getElementById("inputText").addEventListener("input", function () {
      this.style.height = "auto";
      this.style.height = this.scrollHeight + "px";
    });
  </script>
</body>
</html>
